{"title":"Model Building & Scoring for Prediction","markdown":{"headingText":"Model Building & Scoring for Prediction","headingAttr":{"id":"model","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nChapters @sec-slr and @sec-mlr only scratch the surface of model building. Linear regression is a great initial approach to take to model building. In fact, in the realm of statistical models, linear regression (calculated by ordinary least squares) is the **best linear unbiased estimator**. The two key pieces to that previous statement are \"best\" and \"unbiased.\"\n\nWhat does it mean to be **unbiased**? Each of the sample coefficients ($\\hat{\\beta}$'s) in the regression model are estimates of the true coefficients. Just like the statistics back in Chapter @sec-eda, these sample coefficients have sampling distributions - specifically, normally distributed sampling distributions. The mean of the sampling distribution of $\\hat{\\beta}_j$ is the true (known) coefficient $\\beta_j$. This means the coefficient is unbiased.\n\nIn the preceding chapters, we have only scratched the surface of model building. Linear regression is a great initial approach to model building. In fact, in the realm of statistical models, linear regression (calculated by ordinary least squares) is the **best linear unbiased estimator**. The two key pieces to that previous statement are \"best\" and \"unbiased.\"\n\nWhat does it mean to be **unbiased**? Each of the sample coefficients ($\\hat{\\beta}$'s) in the regression model are estimates of the true coefficients. Just like the statistics back in Chapter @sec-intro-stat, these sample coefficients have sampling distributions - specifically, normally distributed sampling distributions. The mean of the sampling distribution of $\\hat{\\beta}_j$ is the true (known) coefficient $\\beta_j$. This means the coefficient is unbiased.\n\nWhat does it mean to be **best**? *IF* the assumptions of ordinary least squares are met fully, then the sampling distributions of the coefficients in the model have the **minimum** variance of all unbiased estimators.\n\nThese two things combined seem like what we want in a model - estimating what we want (unbiased) and doing it in a way that has the minimum amount of variation (best among the unbiased). Again, these rely on the assumptions of linear regression holding true. Another approach to regression would be to use **regularized regression** instead as a different approach to building the model.\n\nThis Chapter aims to answer the following questions:\n\n<ul>\n\n<li>\n\nWhat is regularized regression?\n\n<ul>\n\n<li>\n\nPenalties in Modeling\n\n<li>\n\nRidge Regression\n\n<li>\n\nLASSO\n\n<li>\n\nElastic Net\n\n</ul>\n\n<li>\n\nHow do you optimize the penalty term?\n\n<ul>\n\n<li>\n\nOverfitting\n\n<li>\n\nCross-Validation (CV)\n\n<li>\n\nCV in Regularized Regression\n\n</ul>\n\n<li>\n\nHow do you compare different types of models?\n\n<ul>\n\n<li>\n\nModel Metric\n\n<li>\n\nModel Scoring\n\n<li>\n\nTest Dataset Comparison\n\n</ul>\n\n</ul>\n\n## Regularized Regression\n\nAs the number of variables in a linear regression model increase, the chances of having a model that meets all of the assumptions starts to diminish. Multicollinearity can pose a large problem with bigger regression models. As previously seen in Chapter @sec-diag, the coefficients of a linear regression vary widely in the presence of multicollinearity. These variations lead to overfitting of a regression model. **Overfitting** occurs when a dataset predicts the training data it was built off of really well, but does not generalize to the test dataset or the population in general. More formally, these models have higher variance than desired. In those scenarios, moving out of the realm of unbiased estimates may provide a lower variance in the model, even though the model is no longer unbiased as described above. We wouldn't want to be too biased, but some small degree of bias might improve the model's fit overall.\n\nAnother potential problem for linear regression is when we have more variables than observations in our dataset. This is a common problem in the space of genetic modeling. In this scenario, the ordinary least squares approach leads to multiple solutions instead of just one. Unfortunately, most of these infinite solutions overfit the problem at hand anyway.\n\nRegularized (or penalized or shrinkage) regression techniques potentially alleviate these problems. Regularized regression puts constraints on the estimated coefficients in our model and *shrink* these estimates to zero. This helps reduce the variation in the coefficients (improving the variance of the model), but at the cost of biasing the coefficients. The specific constraints that are put on the regression inform the three common approaches - **ridge regression**, **LASSO**, and **elastic nets**.\n\n### Penalties in Models\n\nIn ordinary least squares linear regression, we minimize the sum of the squared residuals (or errors) as laid out in Chapter @sec-slr.\n\nIn ordinary least squares linear regression, we minimize the sum of the squared residuals (or errors) as laid out in Chapter @sec-slr.\n\n$$\nmin(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2) = min(SSE)\n$$\n\nIn regularized regression, however, we add a penalty term to the $SSE$ as follows:\n\n$$\nmin(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + Penalty) = min(SSE + Penalty)\n$$\n\nAs mentioned above, the penalties we choose constrain the estimated coefficients in our model and shrink these estimates to zero. Different penalties have different effects on the estimated coefficients. Two common approaches to adding penalties are the ridge and LASSO approaches. The elastic net approach is a combination of these two. Let's explore each of these in further detail!\n\n### Ridge Regression\n\nRidge regression adds what is commonly referred to as an \"$L_2$\" penalty:\n\n$$\nmin(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p \\hat{\\beta}^2_j) = min(SSE + \\lambda \\sum_{j=1}^p \\hat{\\beta}^2_j)\n$$\n\nThis penalty is controlled by the **tuning parameter** $\\lambda$. If $\\lambda = 0$, then we have typical OLS linear regression. However, as $\\lambda \\rightarrow \\infty$, the coefficients in the model shrink to zero. This makes intuitive sense. Since the estimated coefficients, $\\hat{\\beta}_j$'s, are the only thing changing to minimize this equation, then as $\\lambda \\rightarrow \\infty$, the equation is best minimized by forcing the coefficients to be smaller and smaller. We will see how to optimize this penalty term in a later section.\n\nLet's build a regularized regression for our Ames dataset. To build a ridge regression we need separate data matrices for our predictors and our target variable. First, we isolate out the variables we are interested in using the `select` function. From there the `model.matrix` function will create any categorical dummy variables needed. We also isolate the target variable into its own vector.\n\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\nlibrary(AmesHousing)\nlibrary(tidyverse)\nlibrary(car)\nlibrary(DescTools)\nlibrary(corrplot)\nlibrary(mosaic)\nlibrary(modelr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(Hmisc)\nlibrary(onehot)\nlibrary(jmuOutlier)\nlibrary(leaps)\nlibrary(glmnet)\nlibrary(nortest)\nlibrary(lmtest)\nlibrary(InformationValue)\nlibrary(gmodels)\nlibrary(vcdExtra)\nlibrary(TSA)\nlibrary(carData)\nlibrary(epiDisplay)\nlibrary(gridExtra)\n```\n\n```{r}\nlibrary(tidyverse)\n\nlibrary(AmesHousing)\names <- make_ordinal_ames()\n\nset.seed(123)\n\names <- ames %>% mutate(id = row_number())\n\ntrain <- ames %>% sample_frac(0.7)\n\ntest <- anti_join(ames, train, by = 'id')\n```\n\n```{r}\ntrain_reg <- train %>% \n  dplyr::select(Sale_Price, \n         Lot_Area,\n         Street,\n         Bldg_Type,\n         House_Style,\n         Overall_Qual,\n         Roof_Style,\n         Central_Air,\n         First_Flr_SF,\n         Second_Flr_SF,\n         Full_Bath,\n         Half_Bath,\n         Fireplaces,\n         Garage_Area,\n         Gr_Liv_Area, \n         TotRms_AbvGrd) %>%\n  replace(is.na(.), 0)\n\ntrain_x <- model.matrix(Sale_Price ~ ., data = train_reg)[, -1]\ntrain_y <- train_reg$Sale_Price\n```\n\nWe will want to do the same thing for the test dataset as well.\n\n```{r}\ntest_reg <- test %>% \n  dplyr::select(Sale_Price, \n         Lot_Area,\n         Street,\n         Bldg_Type,\n         House_Style,\n         Overall_Qual,\n         Roof_Style,\n         Central_Air,\n         First_Flr_SF,\n         Second_Flr_SF,\n         Full_Bath,\n         Half_Bath,\n         Fireplaces,\n         Garage_Area,\n         Gr_Liv_Area, \n         TotRms_AbvGrd) %>%\n  replace(is.na(.), 0)\n\ntest_x <- model.matrix(Sale_Price ~ ., data = test_reg)[, -1]\ntest_y <- test_reg$Sale_Price\n```\n\nFrom there we use the `glmnet` function with the `x =` option where we specify the predictor model matrix and the `y =` option where we specify the target variable. The `alpha = 0` option specifies that a ridge regression will be used as defined in more detail below in the elastic net section. The `plot` function allows us to see the impact of the penalty on the coefficients in the model.\n\n```{r}\nlibrary(glmnet)\n\names_ridge <- glmnet(x = train_x,  y = train_y,  alpha = 0)\n\nplot(ames_ridge, xvar = \"lambda\")\n```\n\nThe `glmnet` function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. This will never change for ridge regression, but does for LASSO.\n\nWhat $\\lambda$ term is best? That will be discussed in the optimizing section below, but let's discuss other possible penalties first.\n\n### LASSO\n\n**Least absolute shrinkage and selection operator** (LASSO) regression adds what is commonly referred to as an \"$L_1$\" penalty:\n\n$$\nmin(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p |\\hat{\\beta}_j|) = min(SSE + \\lambda \\sum_{j=1}^p |\\hat{\\beta}_j|)\n$$\n\nThis penalty is controlled by the **tuning parameter** $\\lambda$. If $\\lambda = 0$, then we have typical OLS linear regression. However, as $\\lambda \\rightarrow \\infty$, the coefficients in the model shrink to zero. This makes intuitive sense. Since the estimated coefficients, $\\hat{\\beta}_j$'s, are the only thing changing to minimize this equation, then as $\\lambda \\rightarrow \\infty$, the equation is best minimized by forcing the coefficients to be smaller and smaller. We will see how to optimize this penalty term in a later section.\n\nHowever, unlike ridge regression that has the coefficient estimates approach zero asymptotically, in LASSO regression the coefficients can actually equal zero. This may not be as intuitive when initially looking at the penalty terms themselves. It becomes easier to see when dealing with the solutions to the coefficient estimates. Without going into too much mathematical detail, this is done by taking the derivative of the minimization function (objective function) and setting it equal to zero. From there we can determine the optimal solution for the estimated coefficients. In OLS regression the estimates for the coefficients can be shown to equal the following (in matrix form):\n\n$$\n\\hat{\\beta} = (X^TX)^{-1}X^TY\n$$\n\nThis changes in the presence of penalty terms. For ridge regression, the solution becomes the following:\n\n$$\n\\hat{\\beta} = (X^TX + \\lambda I)^{-1}X^TY\n$$\n\nThere is no value for $\\lambda$ that can force the coefficients to be zero by itself. Therefore, unless the data makes the coefficient zero, the penalty term can only force the estimated coefficient to zero asymptotically as $\\lambda \\rightarrow \\infty$.\n\nHowever, for LASSO, the solution becomes the following:\n\n$$\n\\hat{\\beta} = (X^TX)^{-1}(X^TY - \\lambda I)\n$$\n\nNotice the distinct difference here. In this scenario, there is a possible penalty value ($\\lambda = X^TY$) that will force the estimated coefficients to equal zero. There is some benefit to this. This makes LASSO also function as a variable selection criteria as well.\n\nLet's build a regularized regression for our Ames dataset using the LASSO approach. To build a LASSO regression we need separate data matrices for our predictors and our target variable just like we did for ridge. From there we use the `glmnet` function with the `x =` option where we specify the predictor model matrix and the `y =` option where we specify the target variable. The `alpha = 1` option specifies that a LASSO regression will be used as defined in more detail below in the elastic net section. The `plot` function allows us to see the impact of the penalty on the coefficients in the model.\n\n```{r}\names_lasso <- glmnet(x = train_x,  y = train_y,  alpha = 1)\n\nplot(ames_lasso, xvar = \"lambda\")\n```\n\nThe `glmnet` function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. Notice as the penalty increases, the number of variables decreases as variables are forced to zero.\n\nWhat $\\lambda$ term is best? That will be discussed in the optimizing section below, but let's discuss the last possible penalty first - the combination of both ridge and LASSO.\n\n### Elastic Net\n\nWhich approach is better, ridge or LASSO? Both have advantages and disadvantages. LASSO performs variable selection while ridge keeps all variables in the model. However, reducing the number of variables might impact minimum error. Also, if you have two correlated variables, which one LASSO chooses to zero out is relatively arbitrary to the context of the problem.\n\nElastic nets were designed to take advantage of both penalty approaches. In elastic nets, we are using both penalties in the minimization:\n\n$$\nmin(SSE + \\lambda_1 \\sum_{j=1}^p |\\hat{\\beta}_j| + \\lambda_2 \\sum_{j=1}^p \\hat{\\beta}^2_j) \n$$\n\nIn R, the `glmnet` function takes a slightly different approach to the elastic net implementation with the following:\n\n$$\nmin(SSE + \\lambda[ \\alpha \\sum_{j=1}^p |\\hat{\\beta}_j| + (1-\\alpha) \\sum_{j=1}^p \\hat{\\beta}^2_j]) \n$$\n\nR still has one penalty $\\lambda$, however, it includes the $\\alpha$ parameter to balance between the two penalty terms. This is why in `glmnet`, the `alpha = 1` option gives a LASSO regression and `alpha = 0` gives a ridge regression. Any value in between zero and one will provide an elastic net.\n\nLet's build a regularized regression for our Ames dataset using the elastic net approach with an $\\alpha = 0.5$. To build am elastic net we need separate data matrices for our predictors and our target variable just like we did for ridge and LASSO. From there we use the `glmnet` function with the `x =` option where we specify the predictor model matrix and the `y =` option where we specify the target variable. The `alpha = 0.5` option specifies that an elastic net will be used since it is between zero and one. The `plot` function allows us to see the impact of the penalty on the coefficients in the model.\n\n```{r}\names_en <- glmnet(x = train_x,  y = train_y,  alpha = 0.5)\n\nplot(ames_en, xvar = \"lambda\")\n```\n\nThe `glmnet` function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. Notice as the penalty increases, the number of variables decreases as variables are forced to zero using the LASSO piece of the elastic net penalty.\n\nWhat $\\lambda$ term is best? What is the proper balance between ridge and LASSO penalties when building an elastic net? That will be discussed in the following section.\n\n## Optimizing Penalties\n\nNo matter the approach listed above, a penatly term $\\lambda$ needs to be picked. However, we do not want to get caught overfitting our training data by minimizing the variance so much that it is not generalizable to the overall pattern and other similar data. Take the following plot:\n\n```{r, echo=FALSE}\nx <- seq(-5, 5, 0.1)\ny <- x^3 - 25*x + 5 + rnorm(length(x), 0, 8)\n\ndf_cubic <- data.frame(x,y)\n\nggplot(df_cubic, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = lm, formula = y ~ poly(x, 3), se = FALSE, colour = \"lightblue\") +  \n  geom_smooth(method = lm, formula = y ~ poly(x, 26), se = FALSE, colour = \"red\", linetype = \"dashed\") +  \n  geom_smooth(method = lm, formula = y ~ poly(x, 2), se = FALSE, colour = \"orange\", linetype = \"dotted\") +  \n  theme_classic()\n```\n\nThe red line is overfitted to the dataset and picks up too much of the unimportant pattern. The orange dotted line is underfit as it does not pick up enough of the pattern. The light blue, solid line is fit well to the dataset as it picks up the general pattern while not overfitting to the dataset.\n\n### Cross-Validation\n\n**Cross-validation** is a common approach in modeling to prevent overfitting of data when you need to **tune** a parameter. The idea of cross-validation is to split the training data into multiple pieces, build the model on a majority of the pieces while evaluating it on the remaining piece. Then we do the same process again, but switch out which pieces the model is built and evaluated on.\n\nA common cross-validation (CV) approach is the $k$-fold CV. In the $k$-fold CV approach, the model is built $k$ times. The data is initially split into $k$ equally sized pieces. Each time the model is built, it is built off of $k-1$ pieces of the data and evaluated on the last piece. This process is repeated until each piece is left out for evaluation. This is diagrammed below in Figure @fig-kCV.\n\n![Example of a 10-fold Cross-Validation](img/kCV.png){#fig-kCV}\n\n### CV in Regularized Regression\n\nIn R, the `cv.glmnet` function will automatically implement a 10-fold CV (by default, but can be adjusted through options) to help evaluate and optimize the $\\lambda$ values for our regularized regression models.\n\nLet's perform an example using the LASSO regression. The `cv.glmnet` function takes the same inputs as the `glmnet` function above. Again, we will use the `plot` function, but this time we get a different plot.\n\n```{r}\names_lasso_cv <- cv.glmnet(x = train_x,  y = train_y,  alpha = 1)\n\nplot(ames_lasso_cv)\n\names_lasso_cv$lambda.min \names_lasso_cv$lambda.1se\n```\n\nThe above plot shows the results from our cross-validation. Here the models are evaluated based on their **mean-squared error** (MSE). The MSE is defined as $\\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2$. The $\\lambda$ value that minimizes the MSE is 49.69435 (with a $\\log(\\lambda)$ = 3.91). This is highlighted by the first, vertical dashed line. The second vertical dashed line is the largest $\\lambda$ value that is one standard error above the minimum value. This value is especially useful in LASSO regressions. The largest $\\lambda$ within one standard error would provide approximately the same MSE, but with a further reduction in the number of variables. Notice that to go from the first line to the second, the change in MSE is very small, but the reduction of variables is from 36 variables to around 12 variables.\n\nLet's look at the impact on the coefficients under this penalty using the `glmnet` function as before.\n\n```{r}\nplot(ames_lasso, xvar = \"lambda\")\nabline(v = log(ames_lasso_cv$lambda.1se), col = \"red\", lty = \"dashed\")\nabline(v = log(ames_lasso_cv$lambda.min), col = \"black\", lty = \"dashed\")\n```\n\nTo investigate which variables are important at a $\\lambda$ value, we can view the coefficients using the `coef` function. They are ranked here:\n\n```{r, warning=FALSE}\ncoef(ames_lasso, s = ames_lasso_cv$lambda.1se) %>%\n  as.matrix() %>%\n  as_tibble(rownames = \"row\") %>%\n  filter(row != \"(Intercept)\", s1 != 0) %>%\n  ggplot(aes(s1, reorder(row, s1))) +\n  geom_point() +\n  ggtitle(\"Influential Variables\") +\n  xlab(\"Coefficient\") +\n  ylab(NULL)\n```\n\nThe variable describing the overall quality of the home is the driving factor of this model as well as the other variables listed above.\n\nA similar approach can be taken for CV with ridge regression using the same structure of code. That will not be covered here. Elastic nets are more complicated in that they have multiple parameters to optimize. For that approach, an optimization grid will need to be structured to evaluate different $\\lambda$ values across different $\\alpha$ values. A loop can be set up to run the `cv.glmnet` function across many different values of $\\alpha$. That will not be covered in detail here.\n\n## Model Comparisons\n\nNow we have multiple models built for our dataset. To help evaluate which model is better, we will use the test dataset as described in Chapter @sec-slr.\n\nThe models we have built are nothing but formulas. All we have to do is put the test dataset in the formula to predict/score the test data. We **do not** rerun the algorithm as the goal is **not** to fit the test dataset, but to just score it. We need to make sure that we have the same structure to the test dataset that we do with the training dataset. Any variable transformations, new variable creations, and missing value imputations done on the training dataset must be done on the test dataset in the same way.\n\n### Model Metrics\n\nOnce the predicted values are obtained from each model we need to evaluate good these predictions are. There are many different metrics to evaluate models depending on what type of target variable that you have. Some common metrics for continuous target variables are the square root of the mean squared error (RMSE), the mean absolute error (MAE), and mean absolute percentage error (MAPE).\n\nThe RMSE is evaluated as follows:\n\n$$\nRMSE = \\sqrt {\\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2}\n$$ The RMSE is an approximation of the standard deviation of the prediction errors of the model. The downside of the RMSE is a lack of interpretability.\n\nThe MAE is evaluated as follows:\n\n$$\nMAE = \\frac{1}{n} \\sum_{i=1}^n |y_i - \\hat{y}_i|\n$$ The MAE gives the average absolute difference between our predictions and the actual values. This is a symmetric measure with great interpretability. The main disadvantage of this metric is that it depends on the scale of the data. For comparing two models evaluated on the same data, this isn't important. However, when comparing across different datasets, this may not be as helpful. For example, in temperature predictions, having an MAE of five degrees for a model built on Honolulu, Hawaii weather might not be comparable to a model built on weather in Raleigh, North Carolina.\n\nThe MAPE is evaluated as follows:\n\n$$\nMAPE = 100 \\times \\frac{1}{n} \\sum_{i=1}^n |\\frac{y_i - \\hat{y}_i}{y_i}|\n$$ The MAPE gives the average absolute *percentage* difference between our predictions and the actual values. This metric is very interpretable and not dependent on the scale of the data. However, it is not symmetric like the MAE.\n\n### Test Dataset Comparison\n\nThe final model we had from Chapter @sec-diag had the variables . From this model we can use the `predict` function with the `newdata =` option to use score the `test` dataset.\n\n```{r}\names_lm <- lm(Sale_Price ~ Overall_Qual + House_Style + Garage_Area + Bldg_Type + \n    Fireplaces + Full_Bath + Half_Bath + Lot_Area + Roof_Style + \n    Central_Air + Second_Flr_SF + TotRms_AbvGrd + First_Flr_SF, data = train)\n```\n\n```{r}\ntest$pred_lm <- predict(ames_lm, newdata = test)\n\nhead(test$pred_lm)\n```\n\nTo get predictions from the regularized regression models, a $\\lambda$ value must be selected. For the previous LASSO regression we will choose the largest $\\lambda$ value within one standard error of the minimum $\\lambda$ value to help reduce the number of variables. Again, we will use the `predict` function. The `s =` option is where we input the $\\lambda$ value. The `newx =` option is where we specify the `test` dataset.\n\n```{r}\ntest_reg$pred_lasso <- predict(ames_lasso, s = ames_lasso_cv$lambda.1se, newx = test_x)\n\nhead(test_reg$pred_lasso)\n```\n\nNow we need to calculate the MAE and MAPE for each model for comparison.\n\n```{r}\ntest %>%\n  mutate(lm_APE = 100*abs((Sale_Price - pred_lm)/Sale_Price)) %>%\n  dplyr::summarise(MAPE_lm = mean(lm_APE))\n\ntest_reg %>%\n  mutate(lasso_APE = 100*abs((Sale_Price - pred_lasso)/Sale_Price)) %>%\n  dplyr::summarise(MAPE_lasso = mean(lasso_APE))\n\n```\n\nFrom the above results, the linear regression from LASSO has a lower MAPE.\n\nOnce we have scored models with the test dataset, we should **not** go back to try and rebuild any models. We will use the model with the lowest MAE or MAPE. This number is also the number that we report on how well our model performs. No metrics on the training dataset should be reported for the performance of the model.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"06-model_building_scoring.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","editor":"visual","theme":["cosmo","style.css"]},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"06-model_building_scoring.pdf"},"language":{},"metadata":{"block-headings":true,"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}